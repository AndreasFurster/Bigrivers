///<reference path="./jaydata.d.ts" />

/*//////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated by JaySvcUtil.exe http://JayData.org for more info        /////////
//////                      oData Unknown TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/


declare module Bigrivers.Server.Model {
  export class Artist extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; Name?: string; Description?: string; Avatar?: string; YoutubeChannel?: string; Website?: string; Facebook?: string; Twitter?: string; Status?: boolean; Performances?: Bigrivers.Server.Model.Performance[]; Genres?: Bigrivers.Server.Model.Genre[]; });
    Id: number;
    Name: string;
    Description: string;
    Avatar: string;
    YoutubeChannel: string;
    Website: string;
    Facebook: string;
    Twitter: string;
    Status: boolean;
    Performances: Bigrivers.Server.Model.Performance[];
    Genres: Bigrivers.Server.Model.Genre[];
    
  }
  
  export class Event extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; Title?: string; ShortDescription?: string; Description?: string; Image?: string; Start?: Date; End?: Date; Price?: string; TicketRequired?: boolean; Status?: boolean; Performances?: Bigrivers.Server.Model.Performance[]; Location?: Bigrivers.Server.Model.Location; });
    Id: number;
    Title: string;
    ShortDescription: string;
    Description: string;
    Image: string;
    Start: Date;
    End: Date;
    Price: string;
    TicketRequired: boolean;
    Status: boolean;
    Performances: Bigrivers.Server.Model.Performance[];
    Location: Bigrivers.Server.Model.Location;
    
  }
  
  export class Genre extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; Name?: string; Artists?: Bigrivers.Server.Model.Artist[]; });
    Id: number;
    Name: string;
    Artists: Bigrivers.Server.Model.Artist[];
    
  }
  
  export class Location extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; Street?: string; Zipcode?: string; City?: string; Stagename?: string; Status?: boolean; Events?: Bigrivers.Server.Model.Event[]; });
    Id: number;
    Street: string;
    Zipcode: string;
    City: string;
    Stagename: string;
    Status: boolean;
    Events: Bigrivers.Server.Model.Event[];
    
  }
  
  export class Performance extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; Description?: string; Start?: Date; End?: Date; Status?: boolean; Artist?: Bigrivers.Server.Model.Artist; Event?: Bigrivers.Server.Model.Event; });
    Id: number;
    Description: string;
    Start: Date;
    End: Date;
    Status: boolean;
    Artist: Bigrivers.Server.Model.Artist;
    Event: Bigrivers.Server.Model.Event;
    
  }
  
  export class Sponsor extends $data.Entity {
    constructor();
    constructor(initData: { Id?: number; Name?: string; Image?: string; Url?: string; Priority?: number; Status?: boolean; });
    Id: number;
    Name: string;
    Image: string;
    Url: string;
    Priority: number;
    Status: boolean;
    
  }
  
}

declare module Default {
  export class Container extends $data.EntityContext {
    onReady(): $data.IPromise;
    onReady(handler: (context: Container) => void): $data.IPromise;
    
    Artists: $data.EntitySet<Bigrivers.Server.Model.Artist>;
    Events: $data.EntitySet<Bigrivers.Server.Model.Event>;
    Genres: $data.EntitySet<Bigrivers.Server.Model.Genre>;
    Locations: $data.EntitySet<Bigrivers.Server.Model.Location>;
    Performances: $data.EntitySet<Bigrivers.Server.Model.Performance>;
    Sponsors: $data.EntitySet<Bigrivers.Server.Model.Sponsor>;
    
  }

}
